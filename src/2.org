#+TITLE: Skills, Tactics, Plays - Intro
#+AUTHOR: Jay Kamat
#+EMAIL: jaygkamat@gmail.com
#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_THEME: black
#+REVEAL_TRANS: linear
#+REVEAL_SPEED: fast
#+REVEAL_PLUGINS: (notes pdf)
#+REVEAL_HLEVEL: 1
#+OPTIONS: toc:nil timestamp:nil reveal_control:t num:nil reveal_history:t tags:nil author:nil

# Export section for md
* Training Summary 1 {#t20162}                                         :docs:
* Python Overview
** Using Python
#+BEGIN_SRC shell
$ python3
Python 3.5.2+ (default, Sep 10 2016, 10:24:58)
[GCC 6.2.0 20160901] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> print("Hello RoboCup!")
Hello RoboCup!
#+END_SRC
** Basic Syntax
#+BEGIN_SRC python :exports both :results output :cache yes
  # Hello world
  print("Hello World!")

  # Set a variable
  myinteger = 1
  mydouble = 1.0
  mystr = "one"

  print(myinteger)
  print(mydouble)
  print(mystr)
#+END_SRC

#+RESULTS[e489be2aa6424fd489bf44e6633bdeefe5bebcac]:
: Hello World!
: 1
: 1.0
: one
** IF Statements and Conditionals
#+BEGIN_SRC python :exports both :results output :cache yes
  if True:
      print("I'm going to print out")
  if False:
      print("I'm never going to run =(")

  if True:
      print("RoboCup is Great!")
  else:
      print("RoboCup Sucks!!!!")

  a = 5
  if a > 2:
      print("A was greater than 2!")
  if a > 2 and a < 10:
      print("A was > 2 and < 5")
  print("A is greater than 3" if a > 3 else "A is less than 3")
  print("A is greater than 9" if a < 3 else "A is less than 9")
#+END_SRC
** Loops and range()
#+BEGIN_SRC python :exports both :results output :cache yes
  a = 10
  while a > 0:
      print(a, end=" ")
      a = a - 1
  print("")

  print(list(range(10)))
  for i in range(10):
      print(i * i, end=" ")
  print("")
#+END_SRC
** Functions
#+BEGIN_SRC python :exports both :results output :cache yes
  def func1(a, b):
      return a + b

  print(func1(2, 4))

  # Lambda Expressions ('advanced' topic)
  def secret_func():
      return "RoboCup!"
  def welcome(target):
      return "Welcome to " + target()

  print(welcome(secret_func))
  print(welcome(lambda: "RoboJackets!"))
  # Lambda with arguments
  # print(welcome(lambda arg1, arg2: "RoboJackets!"))
#+END_SRC

#+RESULTS[a218e7c68935997484fc27aef176998c92a2de9a]:
: 6
: Welcome to RoboCup!
: Welcome to RoboJackets!

** Object Oriented Python
#+BEGIN_SRC python :exports both :results output :cache yes
  class BaseClass():
      globalVar = 1

      # Constructor
      def __init__(self):
          print("Initializing a Base")
          self.localVar = 2

  class ChildClass(BaseClass):
      def __init__(self):
          super().__init__() # call superclass constructor
          print("Initializing Child")
          print("Our local var is: " + str(self.localVar))

  a = BaseClass()
  print("---")
  a = ChildClass()
#+END_SRC

#+RESULTS[0beb6f926bb8d56026537e5dc3c37e84d9d56a07]:
: Initializing a Base
: ---
: Initializing a Base
: Initializing Child
: Our local var is: 2



** Additional Python Resources                                         :docs:
- [[http://lightbot.com/hocflash.html][lightbot]] - A Introduction to Programming Logic
- [[https://wiki.python.org/moin/BeginnersGuide/NonProgrammers][Python Beginner Hub]]
- [[https://learnxinyminutes.com/docs/python/][Python Syntax Overview]]
- [[http://thepythonguru.com/][A intro to python]]
* State Machines
** What is it?
- A state machine is a series of states
- You can transition between them
- A state could have multiple transition
- A state transition only occurs if a condition is fulfilled
*** Examples                                                         :docs:
- A car engine is a state machine, each piston going between different internal states to move the car forward
- A washing machine is a state machine, going between different states to cycle between wash, dry, etc.
- [[https://en.wikipedia.org/wiki/Finite-state_machine][Wikipedia Page on State Machines]]
** Move
[[file:http:/i.imgur.com/gmIcPGq.png]]
** Pass Receive
[[file:http:/i.imgur.com/HAhoMC1.png]]
** Passing
[[file:http:/i.imgur.com/OhWnSwT.png]]
* Plays, Tactics, Skills
- A Basic Unit in our AI
- Only one Play can run at a time
** Skill
- Involves only /one/ robot
- Extremely basic building blocks
- Examples
  - Move
  - Kick
  - Face a direction
  - Capture the ball
- Located in =soccer/gameplay/skills/=
** Tactics
- Involves multiple robots
- Contains skills
- Can contain unique behavior (but usually not)
- Examples
  - Pass
  - Defend
  - Line Up
- Located in =soccer/gameplay/tactics/=
** Plays
- Only one can run
- Contains tactics
- Examples
  - Basic122 (basic offense)
  - Two side attack (basic offense)
  - Stopped Play
  - Line Up
  - Corner Kick
- Located in =soccer/gameplay/plays/*/=
*** Notes                                                            :docs:
- Only plays are actually runnable in our model
  - If you want to run a tactic, make a dummy play that runs that tactic on startup
- For now, we'll only look at plays to keep things simple (maybe we'll get more complex later)
* Basic Plays and State Machines
- Every Play is a State Machine as well!
- Plays use State Machines to tell them what to do
- This is a good thing, since we can have very complex behavior in a play
** Defining States
** Defining Transitions
** Defining Actions to Take In A State
